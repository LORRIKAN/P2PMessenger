//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ClientsCommunicationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerClient", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class ServerClient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.IPEndPoint IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ClientsCommunicationService.Session[] SessionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ClientsCommunicationService.Session[] SessionsInternalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.IPEndPoint IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ClientsCommunicationService.Session[] Sessions {
            get {
                return this.SessionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionsField, value) != true)) {
                    this.SessionsField = value;
                    this.RaisePropertyChanged("Sessions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ClientsCommunicationService.Session[] SessionsInternal {
            get {
                return this.SessionsInternalField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionsInternalField, value) != true)) {
                    this.SessionsInternalField = value;
                    this.RaisePropertyChanged("SessionsInternal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ClientsCommunicationService.ServerClient[] ClientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ClientsCommunicationService.ServerClient[] ClientsInternalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.ClientsCommunicationService.ServerClient CreatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPasswordRequiredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ClientsCommunicationService.ServerClient[] Clients {
            get {
                return this.ClientsField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientsField, value) != true)) {
                    this.ClientsField = value;
                    this.RaisePropertyChanged("Clients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ClientsCommunicationService.ServerClient[] ClientsInternal {
            get {
                return this.ClientsInternalField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientsInternalField, value) != true)) {
                    this.ClientsInternalField = value;
                    this.RaisePropertyChanged("ClientsInternal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.ClientsCommunicationService.ServerClient Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPasswordRequired {
            get {
                return this.IsPasswordRequiredField;
            }
            set {
                if ((this.IsPasswordRequiredField.Equals(value) != true)) {
                    this.IsPasswordRequiredField = value;
                    this.RaisePropertyChanged("IsPasswordRequired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionName {
            get {
                return this.SessionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionNameField, value) != true)) {
                    this.SessionNameField = value;
                    this.RaisePropertyChanged("SessionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionPassword {
            get {
                return this.SessionPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionPasswordField, value) != true)) {
                    this.SessionPasswordField = value;
                    this.RaisePropertyChanged("SessionPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ClientsCommunicationService.ClientWithSuchIPAddressExistsException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ClientsCommunicationService.SessionWithSuchNameExistsException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ClientsCommunicationService.SessionPasswordIsWrongException))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ClientsCommunicationService.ClientWithSuchNickNameExistsException))]
    public partial class ServerException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientWithSuchIPAddressExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class ClientWithSuchIPAddressExistsException : Client.ClientsCommunicationService.ServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionWithSuchNameExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class SessionWithSuchNameExistsException : Client.ClientsCommunicationService.ServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionPasswordIsWrongException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class SessionPasswordIsWrongException : Client.ClientsCommunicationService.ServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientWithSuchNickNameExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class ClientWithSuchNickNameExistsException : Client.ClientsCommunicationService.ServerException {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionDeletionCause", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
    [System.SerializableAttribute()]
    public partial class SessionDeletionCause : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientsCommunicationService.IClientsCommunicationService", CallbackContract=typeof(Client.ClientsCommunicationService.IClientsCommunicationServiceCallback))]
    public interface IClientsCommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/Connect", ReplyAction="http://tempuri.org/IClientsCommunicationService/ConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ClientsCommunicationService.ClientWithSuchNickNameExistsException), Action="http://tempuri.org/IClientsCommunicationService/ConnectClientWithSuchNickNameExis" +
            "tsExceptionFault", Name="ClientWithSuchNickNameExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ClientsCommunicationService.ClientWithSuchIPAddressExistsException), Action="http://tempuri.org/IClientsCommunicationService/ConnectClientWithSuchIPAddressExi" +
            "stsExceptionFault", Name="ClientWithSuchIPAddressExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/ConnectArgumentNullExceptionFault" +
            "", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        Client.ClientsCommunicationService.ServerClient Connect(System.Net.IPEndPoint IPAddress, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/Connect", ReplyAction="http://tempuri.org/IClientsCommunicationService/ConnectResponse")]
        System.Threading.Tasks.Task<Client.ClientsCommunicationService.ServerClient> ConnectAsync(System.Net.IPEndPoint IPAddress, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/UpdateClientIPAddress", ReplyAction="http://tempuri.org/IClientsCommunicationService/UpdateClientIPAddressResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/UpdateClientIPAddressArgumentNull" +
            "ExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void UpdateClientIPAddress(Client.ClientsCommunicationService.ServerClient serverClient, System.Net.IPEndPoint newIPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/UpdateClientIPAddress", ReplyAction="http://tempuri.org/IClientsCommunicationService/UpdateClientIPAddressResponse")]
        System.Threading.Tasks.Task UpdateClientIPAddressAsync(Client.ClientsCommunicationService.ServerClient serverClient, System.Net.IPEndPoint newIPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ChangeNickName", ReplyAction="http://tempuri.org/IClientsCommunicationService/ChangeNickNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/ChangeNickNameArgumentNullExcepti" +
            "onFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void ChangeNickName(Client.ClientsCommunicationService.ServerClient serverClient, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ChangeNickName", ReplyAction="http://tempuri.org/IClientsCommunicationService/ChangeNickNameResponse")]
        System.Threading.Tasks.Task ChangeNickNameAsync(Client.ClientsCommunicationService.ServerClient serverClient, string nickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/Disconnect", ReplyAction="http://tempuri.org/IClientsCommunicationService/DisconnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/DisconnectArgumentNullExceptionFa" +
            "ult", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void Disconnect(Client.ClientsCommunicationService.ServerClient serverClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/Disconnect", ReplyAction="http://tempuri.org/IClientsCommunicationService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(Client.ClientsCommunicationService.ServerClient serverClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/CreateSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/CreateSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/CreateSessionArgumentNullExceptio" +
            "nFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ClientsCommunicationService.SessionWithSuchNameExistsException), Action="http://tempuri.org/IClientsCommunicationService/CreateSessionSessionWithSuchNameE" +
            "xistsExceptionFault", Name="SessionWithSuchNameExistsException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
        Client.ClientsCommunicationService.Session CreateSession(Client.ClientsCommunicationService.ServerClient serverClient, string sessionName, string sessionPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/CreateSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/CreateSessionResponse")]
        System.Threading.Tasks.Task<Client.ClientsCommunicationService.Session> CreateSessionAsync(Client.ClientsCommunicationService.ServerClient serverClient, string sessionName, string sessionPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/RenameSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/RenameSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/RenameSessionArgumentNullExceptio" +
            "nFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void RenameSession(Client.ClientsCommunicationService.Session session, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/RenameSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/RenameSessionResponse")]
        System.Threading.Tasks.Task RenameSessionAsync(Client.ClientsCommunicationService.Session session, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ChangeSessionPassword", ReplyAction="http://tempuri.org/IClientsCommunicationService/ChangeSessionPasswordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/ChangeSessionPasswordArgumentNull" +
            "ExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void ChangeSessionPassword(Client.ClientsCommunicationService.Session session, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ChangeSessionPassword", ReplyAction="http://tempuri.org/IClientsCommunicationService/ChangeSessionPasswordResponse")]
        System.Threading.Tasks.Task ChangeSessionPasswordAsync(Client.ClientsCommunicationService.Session session, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/GetSessionsList", ReplyAction="http://tempuri.org/IClientsCommunicationService/GetSessionsListResponse")]
        Client.ClientsCommunicationService.Session[] GetSessionsList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/GetSessionsList", ReplyAction="http://tempuri.org/IClientsCommunicationService/GetSessionsListResponse")]
        System.Threading.Tasks.Task<Client.ClientsCommunicationService.Session[]> GetSessionsListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/DeleteSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/DeleteSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/DeleteSessionArgumentNullExceptio" +
            "nFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void DeleteSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.SessionDeletionCause deletionCause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/DeleteSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/DeleteSessionResponse")]
        System.Threading.Tasks.Task DeleteSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.SessionDeletionCause deletionCause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/DisconnectFromSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/DisconnectFromSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/DisconnectFromSessionArgumentNull" +
            "ExceptionFault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void DisconnectFromSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/DisconnectFromSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/DisconnectFromSessionResponse")]
        System.Threading.Tasks.Task DisconnectFromSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/JoinSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/JoinSessionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ClientsCommunicationService.SessionPasswordIsWrongException), Action="http://tempuri.org/IClientsCommunicationService/JoinSessionSessionPasswordIsWrong" +
            "ExceptionFault", Name="SessionPasswordIsWrongException", Namespace="http://schemas.datacontract.org/2004/07/WCF_Service")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IClientsCommunicationService/JoinSessionArgumentNullExceptionF" +
            "ault", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        void JoinSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, string sessionPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/JoinSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/JoinSessionResponse")]
        System.Threading.Tasks.Task JoinSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, string sessionPassword);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientsCommunicationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/NewSessionCreated", ReplyAction="http://tempuri.org/IClientsCommunicationService/NewSessionCreatedResponse")]
        void NewSessionCreated(Client.ClientsCommunicationService.Session newSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ClientJoinedSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/ClientJoinedSessionResponse")]
        void ClientJoinedSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient joinedClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ClientLeftSession", ReplyAction="http://tempuri.org/IClientsCommunicationService/ClientLeftSessionResponse")]
        void ClientLeftSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient clientLeft);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/SessionNameChanged", ReplyAction="http://tempuri.org/IClientsCommunicationService/SessionNameChangedResponse")]
        void SessionNameChanged(Client.ClientsCommunicationService.Session session, string sessionOldName, string sessionNewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/SessionPasswordChanged", ReplyAction="http://tempuri.org/IClientsCommunicationService/SessionPasswordChangedResponse")]
        void SessionPasswordChanged(Client.ClientsCommunicationService.Session session);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/SessionClientNickNameChanged", ReplyAction="http://tempuri.org/IClientsCommunicationService/SessionClientNickNameChangedRespo" +
            "nse")]
        void SessionClientNickNameChanged(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, string clientOldNickName, string clientNewNickName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/SessionClientIPAddressChanged", ReplyAction="http://tempuri.org/IClientsCommunicationService/SessionClientIPAddressChangedResp" +
            "onse")]
        void SessionClientIPAddressChanged(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, System.Net.IPEndPoint clientOldIPAddress, System.Net.IPEndPoint clientNewIPAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/SessionDeleted", ReplyAction="http://tempuri.org/IClientsCommunicationService/SessionDeletedResponse")]
        void SessionDeleted(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.SessionDeletionCause sessionDeletionCause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientsCommunicationService/ServerShutDownNoticeReceive", ReplyAction="http://tempuri.org/IClientsCommunicationService/ServerShutDownNoticeReceiveRespon" +
            "se")]
        void ServerShutDownNoticeReceive(long millisecondsBeforeShutDown);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientsCommunicationServiceChannel : Client.ClientsCommunicationService.IClientsCommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientsCommunicationServiceClient : System.ServiceModel.DuplexClientBase<Client.ClientsCommunicationService.IClientsCommunicationService>, Client.ClientsCommunicationService.IClientsCommunicationService {
        
        public ClientsCommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ClientsCommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ClientsCommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientsCommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ClientsCommunicationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.ClientsCommunicationService.ServerClient Connect(System.Net.IPEndPoint IPAddress, string nickName) {
            return base.Channel.Connect(IPAddress, nickName);
        }
        
        public System.Threading.Tasks.Task<Client.ClientsCommunicationService.ServerClient> ConnectAsync(System.Net.IPEndPoint IPAddress, string nickName) {
            return base.Channel.ConnectAsync(IPAddress, nickName);
        }
        
        public void UpdateClientIPAddress(Client.ClientsCommunicationService.ServerClient serverClient, System.Net.IPEndPoint newIPAddress) {
            base.Channel.UpdateClientIPAddress(serverClient, newIPAddress);
        }
        
        public System.Threading.Tasks.Task UpdateClientIPAddressAsync(Client.ClientsCommunicationService.ServerClient serverClient, System.Net.IPEndPoint newIPAddress) {
            return base.Channel.UpdateClientIPAddressAsync(serverClient, newIPAddress);
        }
        
        public void ChangeNickName(Client.ClientsCommunicationService.ServerClient serverClient, string nickName) {
            base.Channel.ChangeNickName(serverClient, nickName);
        }
        
        public System.Threading.Tasks.Task ChangeNickNameAsync(Client.ClientsCommunicationService.ServerClient serverClient, string nickName) {
            return base.Channel.ChangeNickNameAsync(serverClient, nickName);
        }
        
        public void Disconnect(Client.ClientsCommunicationService.ServerClient serverClient) {
            base.Channel.Disconnect(serverClient);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(Client.ClientsCommunicationService.ServerClient serverClient) {
            return base.Channel.DisconnectAsync(serverClient);
        }
        
        public Client.ClientsCommunicationService.Session CreateSession(Client.ClientsCommunicationService.ServerClient serverClient, string sessionName, string sessionPassword) {
            return base.Channel.CreateSession(serverClient, sessionName, sessionPassword);
        }
        
        public System.Threading.Tasks.Task<Client.ClientsCommunicationService.Session> CreateSessionAsync(Client.ClientsCommunicationService.ServerClient serverClient, string sessionName, string sessionPassword) {
            return base.Channel.CreateSessionAsync(serverClient, sessionName, sessionPassword);
        }
        
        public void RenameSession(Client.ClientsCommunicationService.Session session, string newName) {
            base.Channel.RenameSession(session, newName);
        }
        
        public System.Threading.Tasks.Task RenameSessionAsync(Client.ClientsCommunicationService.Session session, string newName) {
            return base.Channel.RenameSessionAsync(session, newName);
        }
        
        public void ChangeSessionPassword(Client.ClientsCommunicationService.Session session, string newPassword) {
            base.Channel.ChangeSessionPassword(session, newPassword);
        }
        
        public System.Threading.Tasks.Task ChangeSessionPasswordAsync(Client.ClientsCommunicationService.Session session, string newPassword) {
            return base.Channel.ChangeSessionPasswordAsync(session, newPassword);
        }
        
        public Client.ClientsCommunicationService.Session[] GetSessionsList() {
            return base.Channel.GetSessionsList();
        }
        
        public System.Threading.Tasks.Task<Client.ClientsCommunicationService.Session[]> GetSessionsListAsync() {
            return base.Channel.GetSessionsListAsync();
        }
        
        public void DeleteSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.SessionDeletionCause deletionCause) {
            base.Channel.DeleteSession(session, deletionCause);
        }
        
        public System.Threading.Tasks.Task DeleteSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.SessionDeletionCause deletionCause) {
            return base.Channel.DeleteSessionAsync(session, deletionCause);
        }
        
        public void DisconnectFromSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient) {
            base.Channel.DisconnectFromSession(session, serverClient);
        }
        
        public System.Threading.Tasks.Task DisconnectFromSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient) {
            return base.Channel.DisconnectFromSessionAsync(session, serverClient);
        }
        
        public void JoinSession(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, string sessionPassword) {
            base.Channel.JoinSession(session, serverClient, sessionPassword);
        }
        
        public System.Threading.Tasks.Task JoinSessionAsync(Client.ClientsCommunicationService.Session session, Client.ClientsCommunicationService.ServerClient serverClient, string sessionPassword) {
            return base.Channel.JoinSessionAsync(session, serverClient, sessionPassword);
        }
    }
}
